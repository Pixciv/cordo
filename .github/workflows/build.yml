name: Build Cordova Android APK

on:
  push:
    branches:
      - main 

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # Node.js 20'ye yükseltildi
          cache: 'npm'

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: Install Cordova CLI
        run: npm install -g cordova@latest

      - name: Install dependencies and platforms
        run: |
          npm install
          # Mevcut platformu kaldırıp yeniden ekle
          cordova platform remove android || true
          cordova platform add android@latest

      - name: Decode Keystore from Secrets
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > my-release-key.keystore
          # Keystore'u kontrol et
          keytool -list -v -keystore my-release-key.keystore -storepass "${{ secrets.KEYSTORE_PASSWORD }}" -alias "${{ secrets.KEY_ALIAS }}" || echo "Keystore check completed"

      - name: Create build.json for signing
        run: |
          cat > build.json <<EOF
          {
            "android": {
              "release": {
                "keystore": "my-release-key.keystore",
                "storePassword": "${{ secrets.KEYSTORE_PASSWORD }}",
                "alias": "${{ secrets.KEY_ALIAS }}",
                "password": "${{ secrets.KEY_PASSWORD }}",
                "keystoreType": "PKCS12"
              }
            }
          }
          EOF
          
      - name: Show build.json (debug)
        run: cat build.json

      - name: Clean previous builds
        run: |
          cordova clean android

      - name: Build Release APK
        run: |
          cordova build android --release --buildConfig=build.json

      - name: Find and Copy APK
        run: |
          APK_PATH=$(find platforms/android/app/build/outputs -name "*.apk" | grep release | head -n 1)
          echo "Found APK: $APK_PATH"
          if [ -f "$APK_PATH" ]; then
            mkdir -p upload-apk
            cp "$APK_PATH" upload-apk/app-release.apk
            ls -la upload-apk/
          else
            echo "❌ APK not found. Listing directories..."
            find platforms/android/app/build/outputs -type f -name "*.apk"
            exit 1
          fi

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: upload-apk/app-release.apk
